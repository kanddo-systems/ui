{"version":3,"file":"Tokens-Shadows-Shadows-stories.b266a1d9.iframe.bundle.js","mappings":";;;;;;AAcA;;;;;;AAMA;;;;;AAOA;ACtBA;AACA;AACA;;AAEA;;AAGA;AACA;;ACIA;AACA;AACA;AACA;ACXA","sources":["webpack://@kanddo-ui/react/./src/docs/Tokens/Shadows/Shadows.stories.tsx","webpack://@kanddo-ui/react/./src/components/Card/Card.styles.ts","webpack://@kanddo-ui/react/./src/components/Typography/Typography.styles.ts","webpack://@kanddo-ui/react/./src/components/Typography/Typography.tsx"],"sourcesContent":["import React from \"react\";\nimport { StoryFn } from \"@storybook/react\";\nimport { shadows, sizes } from \"@kanddo-ui/core\";\nimport { Card } from \"../../../components/Card/Card\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 24px;\n  padding: 24px;\n`;\n\nconst ShadowBox = styled.div<{ shadow: string }>`\n  width: 120px;\n  height: 48px;\n  margin: 0 auto 8px auto;\n  border-radius: 8px;\n  background: #fff;\n  box-shadow: ${(props) => props.shadow};\n  border: 1px solid #e2e8f0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst ShadowItem: React.FC<{ name: string; value: string }> = ({\n  name,\n  value,\n}) => (\n  <div style={{ marginBottom: 20, textAlign: \"center\" }}>\n    <ShadowBox shadow={value}>{name !== \"none\" && \" \"}</ShadowBox>\n    <small style={{ display: \"block\", marginTop: 4 }}>\n      {name} â€” <code>{value}</code>\n    </small>\n  </div>\n);\n\nexport default {\n  title: \"Tokens/Shadows\",\n  parameters: {\n    layout: \"centered\",\n  },\n};\n\n\nconst Template: StoryFn = () => (\n  <Container>\n    <Card title=\"Shadow Tokens\">\n      {Object.keys(sizes).map((name) => (\n        <ShadowItem key={name} name={name} value={shadows[name]} />\n      ))}\n    </Card>\n  </Container>\n);\n\nexport const Default = Template.bind({});\n","import { borderRadius, colors, shadows, spacing, typography } from '@kanddo-ui/core';\nimport styled from 'styled-components';\n\nexport const Component = {\n  Wrapper: styled.div`\n    font-family: ${typography.fontFamily};\n    background-color: ${colors.background.default};\n    border-radius: ${borderRadius('medium')};\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1);\n    padding: ${spacing.medium};\n    width: 300px;\n  `,\n  ChildrenWrapper: styled.p`\n    margin-top: ${spacing.medium};\n  `,\n};\n","import styled from 'styled-components';\nimport { colors, typography } from '@kanddo-ui/core';\nimport { CombinedSizes } from '@kanddo-ui/core/dist/tokens/typography';\n\nconst typographyStyles = {\n    xxxxlarge: { fontSize: typography.sizes.xxxxlarge, fontWeight: typography.weight.bold },\n    xxxlarge: { fontSize: typography.sizes.xxxlarge, fontWeight: typography.weight.semiBold },\n    xxlarge: { fontSize: typography.sizes.xxlarge, fontWeight: typography.weight.medium },\n    xlarge: { fontSize: typography.sizes.xlarge, fontWeight: typography.weight.semiBold },\n    large: { fontSize: typography.sizes.large, fontWeight: typography.weight.regular },\n    medium: { fontSize: typography.sizes.medium, fontWeight: typography.weight.light },\n    small: { fontSize: typography.sizes.small, fontWeight: typography.weight.regular },\n    xsmall: { fontSize: typography.sizes.xsmall, fontWeight: typography.weight.light },\n    xxsmall: { fontSize: typography.sizes.xxsmall, fontWeight: typography.weight.light },\n};\n\nexport const Component = styled.span<{ variant: CombinedSizes }>`\n    font-family: ${typography.fontFamily};\n    color: ${colors.text.default};\n    font-size: ${(props) => typographyStyles[props.variant]?.fontSize || typography.sizes.small};\n    font-weight: ${(props) => typographyStyles[props.variant]?.fontWeight || typography.weight.regular};\n`;\n","import React from 'react';\nimport { Component } from './Typography.styles';\nimport { CombinedSizes } from '@kanddo-ui/core/dist/tokens/typography';\n\nexport interface TypographyProps {\n    variant: CombinedSizes;\n    children: React.ReactNode;\n}\n\nexport const Typography: React.FC<TypographyProps> = ({ variant, children }) => {\n    return <Component variant={variant}>{children}</Component>;\n};\n"],"names":[],"sourceRoot":""}